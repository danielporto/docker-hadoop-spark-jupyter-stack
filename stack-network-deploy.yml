#! /usr/local/bin/ansible-playbook

- hosts: swarm_manager
  any_errors_fatal: true
  gather_facts: no
  become: no
  vars_files:
      - vars.yaml

  tasks:
    - name: Check if Swarm has already been Initialized
      shell: docker node ls
      register: swarm_status
      failed_when: "not(swarm_status.rc == 0 or 'This node is not a swarm manager.' in swarm_status.stderr)"

    - name: Initialize Docker Swarm
      shell: >
            docker swarm init
            --advertise-addr={{ hostvars[inventory_hostname]['ansible_host'] }}:{{ swarm_advertise_port }}
      when: swarm_status.rc != 0
      run_once: true

    - name: Get the Manager join-token
      shell: docker swarm join-token --quiet manager
      register: manager_token

    - name: Get the worker join-token
      shell: docker swarm join-token --quiet worker
      register: worker_token


    - name: Save workers token
      set_fact:
        worker_token: "{{ worker_token['stdout'] }}"
      when: swarm_status.rc != 0

    # - name: Print worker join-token
    #   debug:
    #     msg: "{{ worker_token }}"

    - name: Initialize Docker Swarm Network (traefik)
      shell: >
            docker network create --attachable -d overlay {{ swarm_external_overlay_network }}
      when: swarm_status.rc != 0
      run_once: true

- hosts: swarm_workers
  any_errors_fatal: true
  become: no
  gather_facts: no
  vars_files:
      - vars.yaml

  tasks:
    - name: Print add cmd to add node to swarm
      debug:
        msg: "docker swarm join --token {{ hostvars[hostvars[inventory_hostname]['groups']['swarm_manager'][0]]['worker_token'].stdout }} {{ hostvars[hostvars[inventory_hostname]['groups']['swarm_manager'][0]]['ansible_host']}}:{{ swarm_advertise_port }}"

    - name: Add Workers to the Swarm
      shell: "docker swarm join --token {{ hostvars[hostvars[inventory_hostname]['groups']['swarm_manager'][0]]['worker_token'].stdout }} {{ hostvars[hostvars[inventory_hostname]['groups']['swarm_manager'][0]]['ansible_host']}}:{{ swarm_advertise_port }}"
      register: out
      failed_when: "not(out.rc == 0 or 'This node is already part of a swarm' in out.stderr)"

- hosts: swarm_manager
  any_errors_fatal: true
  gather_facts: no
  become: no
  vars_files:
      - vars.yaml

  tasks:
    - name: compute the swarm size
      set_fact:
        swarm_size: "{{ hostvars[inventory_hostname]['groups']['swarm_manager'] | union(hostvars[inventory_hostname]['groups']['swarm_workers']) | unique | length  }}"

    - name: print swarm size
      debug:
        var: swarm_size

    - name: Check if all nodes are joined to the swarm
      shell: docker node ls -q | wc -l
      register: swarm_status
      failed_when: "not( swarm_size == swarm_status.stdout )"
